{
  "C:\\Users\\MIGISHA Ivan\\OneDrive\\Documents\\projects\\seriesorder\\app\\back-end": {
    "versionSfCore": null,
    "versionFramework": "4.3.2",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\MIGISHA Ivan\\OneDrive\\Documents\\projects\\seriesorder\\app\\back-end",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "migisha",
      "app": "migisha",
      "service": "readright-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "stage": "prod",
        "region": "eu-north-1",
        "environment": {
          "HOST": "localhost",
          "AWS_HOST": "database-2.c3wsyeq2ezzw.eu-north-1.rds.amazonaws.com",
          "PORT": "8000",
          "MYSQL_USER": "root",
          "MYSQL_PASSWORD": "<REDACTED>",
          "MYSQL_DATABASE": "readRight",
          "MYSQL_AWS_USER": "readright",
          "MYSQL_AWS_PASSWORD": "<REDACTED>",
          "MYSQL_AWS_DATABASE": "readright",
          "SENDER_NAME": "Read Right",
          "SENDER_EMAIL": "readright72@gmail.com",
          "EMAIL_PASSWORD": "<REDACTED>",
          "ACCESS_TOKEN_SECRET": "<REDACTED>",
          "REFRESH_TOKEN_SECRET": "<REDACTED>",
          "BUCKET_NAME": "readright",
          "BUCKET_REGION": "eu-north-1",
          "ACCESS_KEY": "<REDACTED>",
          "SECRET_ACCESS_KEY": "<REDACTED>"
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/readright-api-prod-app"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "readright-api",
                          "prod",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/readright-api-prod*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/readright-api-prod*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "readright-api",
                      "prod",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AppLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e2d4815c-2e8e",
                  "S3Key": "serverless/readright-api/prod/1726069753047-2024-09-11T15:49:13.047Z/readright-api.zip"
                },
                "Handler": "index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "readright-api-prod-app",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "HOST": "localhost",
                    "AWS_HOST": "database-2.c3wsyeq2ezzw.eu-north-1.rds.amazonaws.com",
                    "PORT": "8000",
                    "MYSQL_USER": "root",
                    "MYSQL_PASSWORD": "<REDACTED>",
                    "MYSQL_DATABASE": "readRight",
                    "MYSQL_AWS_USER": "readright",
                    "MYSQL_AWS_PASSWORD": "<REDACTED>",
                    "MYSQL_AWS_DATABASE": "readright",
                    "SENDER_NAME": "Read Right",
                    "SENDER_EMAIL": "readright72@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ACCESS_TOKEN_SECRET": "<REDACTED>",
                    "REFRESH_TOKEN_SECRET": "<REDACTED>",
                    "BUCKET_NAME": "readright",
                    "BUCKET_REGION": "eu-north-1",
                    "ACCESS_KEY": "<REDACTED>",
                    "SECRET_ACCESS_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppLogGroup"
              ]
            },
            "AppLambdaVersionJVEThqrsmHCA2FUH7kFkPlPZsgU62fdueho95OhAs9E": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppLambdaFunction"
                },
                "CodeSha256": "Zl1nKFqXzmE/QTgooNxEF2kiy4iv/fXEw3pa9Qe/Wg4="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "prod-readright-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1726069737659": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "prod"
              },
              "DependsOn": [
                "ApiGatewayMethodOptions",
                "ApiGatewayMethodProxyVarOptions",
                "ApiGatewayMethodAny",
                "ApiGatewayMethodProxyVarAny"
              ]
            },
            "AppLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-north-1-e2d4815c-2e8e",
              "Export": {
                "Name": "sls-readright-api-prod-ServerlessDeploymentBucketName"
              }
            },
            "AppLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppLambdaVersionJVEThqrsmHCA2FUH7kFkPlPZsgU62fdueho95OhAs9E"
              },
              "Export": {
                "Name": "sls-readright-api-prod-AppLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/prod"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-readright-api-prod-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "app": {
          "handler": "index.handler",
          "events": [
            {
              "http": {
                "path": "",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "readright-api-prod-app",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AppLambdaVersionJVEThqrsmHCA2FUH7kFkPlPZsgU62fdueho95OhAs9E"
        }
      }
    },
    "serviceRawFile": "org: migisha\r\napp: migisha\r\nservice: readright-api  # Your service name\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x  # Correct Node.js runtime version\r\n  stage: prod\r\n  region: eu-north-1  # AWS region where your Lambda will be deployed\r\n\r\n  environment:  # Add all your environment variables here\r\n    HOST: localhost\r\n    AWS_HOST: database-2.c3wsyeq2ezzw.eu-north-1.rds.amazonaws.com\r\n    PORT: 8000\r\n    \r\n    # Database\r\n    MYSQL_USER: root\r\n    MYSQL_PASSWORD: carmel@2023\r\n    MYSQL_DATABASE: readRight\r\n    \r\n    # AWS RDS\r\n    MYSQL_AWS_USER: readright\r\n    MYSQL_AWS_PASSWORD: mEdsHiA1NOdY4BT8oH34\r\n    MYSQL_AWS_DATABASE: readright\r\n\r\n    # Email\r\n    SENDER_NAME: Read Right\r\n    SENDER_EMAIL: readright72@gmail.com\r\n    EMAIL_PASSWORD: kope sijp ztsv cfdc\r\n\r\n    # Tokens\r\n    ACCESS_TOKEN_SECRET: e98f797658ec14ad28f939505470c506140b07c93f35666b2c961ed5559b088f3e2640b8816cbf60e6c914b87305ad9469bd7292a8eb9757085925d9a0dc57b2\r\n    REFRESH_TOKEN_SECRET: 4bce77b4cfe88aa1e6270acf8301a6fe36de8050362304d396f9d59660b98721190154db69c87be4dac6ac09d987e2584721cb64932771b19f838b103c71b4c4\r\n\r\n    # S3 Bucket\r\n    BUCKET_NAME: readright\r\n    BUCKET_REGION: eu-north-1\r\n    ACCESS_KEY: AKIARUJPUFQEHSC22FOU\r\n    SECRET_ACCESS_KEY: DC79Kh4X4C9dcSczPIGmebbrD8dhZJXInR/8jVrh\r\n\r\nfunctions:\r\n  app:\r\n    handler: index.handler  # This points to the handler in your index.js\r\n    events:\r\n      - http:\r\n          path: /\r\n          method: ANY  # Allowing both GET and POST requests\r\n          cors: true \r\n      - http:\r\n          path: /{proxy+}  # Handles all sub-paths for routes like /api\r\n          method: ANY\r\n          cors: true \r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "b9393980cab4310b9d0a27070e4ac248",
    "stage": "prod",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "9f0d235d-6776-4843-be41-4a41fc9b85ac",
    "orgName": "migisha",
    "userId": "gK9qlQ9nfr4LkxFvCb",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "QKcwB9HltWfX5mCJFl",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "migisha",
    "subscription": null,
    "userEmail": "vanmigi@outlook.com",
    "serviceProviderAwsRegion": "eu-north-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "112305908744",
    "projectType": "traditional",
    "versionSf": "4.3.2",
    "serviceProviderAwsCfStackName": "readright-api-prod",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:eu-north-1:112305908744:stack/readright-api-prod/73c56ed0-7053-11ef-9607-0e1b99417679",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-north-1:112305908744:stack/readright-api-prod/73c56ed0-7053-11ef-9607-0e1b99417679",
    "serviceProviderAwsCfStackCreated": "2024-09-11T15:35:19.972Z",
    "serviceProviderAwsCfStackUpdated": "2024-09-11T15:50:06.117Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AppLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:112305908744:function:readright-api-prod-app:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-readright-api-prod-AppLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://6lmsc9gl23.execute-api.eu-north-1.amazonaws.com/prod",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-readright-api-prod-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-north-1-e2d4815c-2e8e",
        "ExportName": "sls-readright-api-prod-ServerlessDeploymentBucketName"
      }
    ]
  }
}